//TDS
#define TdsSensorPin A0
#define VREF 5.0      // analog reference voltage(Volt) of the ADC
#define SCOUNT  30           // sum of sample point
int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0,copyIndex = 0;
float averageVoltage = 0,tdsValue = 0,temperature = 25;
//RTC
#include <DS3231.h>
#include <Wire.h>
// Init the DS3231 using the hardware interface
DS3231  rtc(SDA, SCL);
//BLUETOOTH
#include <SoftwareSerial.h>
SoftwareSerial BTserial(0,1); // RX | TX
String val; // to receive data from serial
unsigned long lastConnectionTime = 0;
const unsigned long postingInterval = 1000;
const int LONG_PRESS_TIME;
//TEMT6000
int temt6000Pin = A1;
//SD
#include <SPI.h>
#include <SD.h>
const int chipSelect = 10;
File dataFile;
//MS5803
#include <SparkFun_MS5803_I2C.h> // Click here to get the library: http://librarymanager/All#SparkFun_MS5803-14BA
// Begin class with selected address
// available addresses (selected by jumper on board)
// default is ADDRESS_HIGH
//  ADDRESS_HIGH = 0x76
//  ADDRESS_LOW  = 0x77
MS5803 sensor(ADDRESS_HIGH);
float temperature_c;
double pressure_abs, pressure_relative, altitude_delta, pressure_baseline;
double base_altitude = 1655.0; // Altitude of SparkFun's HQ in Boulder, CO. in (m)
//GPS
#include <SoftwareSerial.h>
int RXPin = 8;
int TXPin = 9;
int GPSBaud = 9600;
SoftwareSerial gpsSerial(RXPin, TXPin);
//LCD AND KY-040
#include <LiquidCrystal_I2C.h>  //i2C LCD Library
LiquidCrystal_I2C lcd(0x27, 16, 2); // Ganti 0x3F sesuai hasil scan (bisa jadi 0x27)
#define CLK 5 
#define DT 6 
#define SW 7 
int durationNum;
int durationUnit;
int intervalNum;
int intervalUnit;
int counter = 0; 
int currentStateCLK; 
int lastStateCLK; 
String currentDir =""; 
unsigned long lastButtonPress = 0; 
int tampilan = 1; 
int modeMenu = 0;
int modeSubmenu = 0;
String namaMenu;
String nilaiMenu;
unsigned long startTime;
unsigned long currentMillis;
bool timerActive;
unsigned long duration;



void setup() {
     Serial.begin(9600);
  // Set KY-040 Pin
  pinMode(CLK,INPUT); 
  pinMode(DT,INPUT); 
  pinMode(SW, INPUT_PULLUP); 
  lastStateCLK = digitalRead(CLK); 
  //LCD
  lcd.init();
  lcd.backlight();
  lcd.print("Main Menu : ");
  lcd.setCursor(0,1);
  lcd.print("1. Read Data");
  //Bluetooth
  BTserial.begin(9600);
  BTserial.println("WATER QUALITY MONITORING");
  if(BTserial.available()>0){
    BTserial.write("AT+SLEEP");
    BTserial.write("\n");
  }
  //SD   
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
    ///////////////////////////////////

  }
  Serial.print("Initializing SD card...");

  // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    Serial.println("Card failed, or not present");
    // don't do anything more:
    while (1);
  }
  Serial.println("card initialized.");
  //RTC
  Wire.begin(); 
  rtc.begin();
  // The following lines can be uncommented to set the date and time
  //rtc.setDOW(SUNDAY);     // Set Day-of-Week to SUNDAY
  //rtc.setTime(19, 24, 0);     // Set the time to 12:00:00 (24hr format)
  //rtc.setDate(20, 12, 2020);   // date, month, year
  
  //TDS
  pinMode(TdsSensorPin,INPUT);
  
  //MS5803
  sensor.reset();
  sensor.begin();
  pressure_baseline = sensor.getPressure(ADC_4096);
  //GPS
  gpsSerial.begin(GPSBaud);
  


/////////////////////////////////////
    Serial.print("\t\t\t\t\t");
    Serial.print("TEMPERATURE");
    Serial.print("\tTDS");
    Serial.print("\t\tAMBIENT LIGHT");
    Serial.print("\tDEPTH/PRESSURE");
    Serial.print("\tGPS");
    Serial.println();
///////////////////////////////////

  
}

void loop() {
  // put your main code here, to run repeatedly: 
//Menu
    // Baca status CLK saat ini
    currentStateCLK = digitalRead(CLK); 
  
  if (currentStateCLK != lastStateCLK  && currentStateCLK == 1){ 

        // Encoder memutar searah jarum jam sehingga terjadi penambahan
        if (digitalRead(DT) != currentStateCLK) { 
          
          // =========== Main Menu =========== //
          if (tampilan == 1){
            modeMenu ++; 
            if(modeMenu > 5){ modeMenu = 0; }
          } 

          // =========== Sub Menu =========== //
          if (tampilan == 0){
             modeSubmenu ++; 
            if (modeMenu == 0) {    //read
              if(modeSubmenu > 1){ 
                modeSubmenu = 0;
                ReadData();
                while(1){
                  if(BTserial.available()>0)
                    if(BTserial.read())
                      break;
                }
            }
            else if (modeMenu == 1) {  //record
              if(modeSubmenu > 1){ modeSubmenu = 0;}
            }
            else if (modeMenu == 2) {   //duration  //http://www.cplusplus.com/forum/beginner/1196/
              if(modeSubmenu > 999){
                modeSubmenu = 0;
                durationNum = modeSubmenu*1;                           
              }              
            }
            else if (modeMenu == 3) {   //unit duration
              if(modeSubmenu > 3){
                modeSubmenu = 0;
                durationUnit = modeSubmenu;
                if(modeSubmenu==1){
                  durationUnit = modeSubmenu*1000;  //unit second in milliseconds
                  if(modeSubmenu==2){
                    durationUnit = modeSubmenu*60000;   //unit minute in milliseconds
                    if(modeSubmenu==3){
                      durationUnit = modeSubmenu*3600000;   //unit hour in milliseconds
                    }
                  }
                }
              }
            }
            else if (modeMenu == 4) {    //interval
              if(modeSubmenu > 999){ 
                modeSubmenu = 0;
                intervalNum = modeSubmenu*1;
              }
            }
            else if(modeMenu == 4){   //unit interval
              if(modeSubmenu > 3) {
                modeSubmenu = 0;
                intervalUnit = modeSubmenu;
                if(modeSubmenu==1){
                  intervalUnit = modeSubmenu*1000;    //unit second in milliseconds
                  if(modeSubmenu==2){
                    intervalUnit = modeSubmenu*60000;    //unit minute in milliseconds
                    if(modeSubmenu==3){
                      intervalUnit = modeSubmenu*3600000;  //unit hour in milliseconds  
                    }
                  }
                }
              }
            }
            
          }
    
        } else { 
    
          
          if (tampilan == 1){
            modeMenu --; 
            if(modeMenu < 0){ modeMenu = 5; }
          }

          // =========== Sub Menu =========== //
          if (tampilan == 0){
            modeSubmenu --;
            if (modeMenu == 0) { // read
              if(modeSubmenu < 0){ modeSubmenu = 1;}
            }
            else if (modeMenu == 1) { // record
              if(modeSubmenu < 0){ modeSubmenu = 1;}
            }
            else if (modeMenu == 2) { // duration
              if(modeSubmenu < 0){ modeSubmenu = 999;}
            }
            else if (modeMenu == 3) { // unit duration
              if(modeSubmenu < 0){ modeSubmenu = 3;}
            }
            else if (modeMenu == 4) { // interval
              if(modeSubmenu < 0){ modeSubmenu = 999;}
            }
            else if (modeMenu == 5) { //unit interval
              if(modeSubmenu < 0) { modeSubmenu == 3;}
            }
            
          }
        } 

        // =================== Menampilkan Main Menu =================== //
        if (tampilan == 1){
        switch (modeMenu){
              case 0: namaMenu = "1. Read Data"; nilaiMenu = "Y=1,N=0 : ";     break;
              case 1: namaMenu = "2. Record Data"; nilaiMenu = "Y=1,N=0 : ";   break;
              case 2: namaMenu = "3. Duration"; nilaiMenu = "Duration : ";     break;
              case 3: namaMenu = "4. Duration Unit"; nilaiMenu = "s=1/m=2/h=3 : "; break;
              case 4: namaMenu = "5. Interval"; nilaiMenu = "Interval : ";     break;
              case 5: namaMenu = "6. Interval Unit"; nilaiMenu = "s=1/m=2/h=3 : "; break;
            }
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print("Main Menu : ");
            lcd.setCursor(0,1);
            lcd.print(namaMenu);  
        }
        // =================== Menampilkan Sub Menu =================== //
        if (tampilan == 0){
          if (modeMenu == 0) { // Setting Jam
            // Simpan Jam
          }
          
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print(namaMenu);
            lcd.setCursor(0,1);
            lcd.print(nilaiMenu);
            lcd.print(modeSubmenu); 
        }
  } 
    

  lastStateCLK = currentStateCLK; 

  int btnState = digitalRead(SW); 

  if (btnState == LOW) { 

    if (millis() - lastButtonPress > 50) { 

      switch (modeMenu){
              case 0: namaMenu = "1. Read Data"; nilaiMenu = "Y=1,N=0 : ";     break;
              case 1: namaMenu = "2. Record Data"; nilaiMenu = "Y=1,N=0 : ";   break;
              case 2: namaMenu = "3. Duration"; nilaiMenu = "Duration : "; break;
              case 3: namaMenu = "4. Duration Unit"; nilaiMenu = "s=1,m=2,h=3 : ";   break;
              case 4: namaMenu = "5. Interval"; nilaiMenu = "Interval : ";   break;
              case 5: namaMenu = "6. Interval Unit"; nilaiMenu = "s=1/m=2/h=3 : "; break;
           }

      switch (tampilan){
        case 0: 
          tampilan = 1;
          Serial.println(tampilan);
          
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("Main Menu : ");
          lcd.setCursor(0,1);
          lcd.print(namaMenu);
          break;
        case 1: 
          tampilan = 0;
          Serial.println(tampilan);
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print(namaMenu);
          lcd.setCursor(0,1);
          lcd.print(nilaiMenu);
          lcd.print(modeSubmenu);
          break;
      }
      
      // modeMenu = 0; 
      modeSubmenu = 1;
    } 

    // Mengambil saat terakhir tombol ditekan
    lastButtonPress = millis(); 

  } 
  // tambahkan delay untuk mrnghindari debounce saat pembacaan
  delay(1); 

int z = intervalNum * intervalUnit;
if(currentMillis - startTime >= z){
  startTime = currentMillis;
  timerActive = true;
  duration = durationNum * durationUnit;
  RecordData();
}
             
}
}

 /////////////////////////////////////////////////////////////////////END OF MAIN LOOP//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
void RecordData(){

    //digitalWrite(13, LOW);
      //RTC
  // Send Day-of-Week
  Serial.print(rtc.getDOWStr());
  Serial.print(" ");
  // Send date
  Serial.print(rtc.getDateStr());
  Serial.print(" -- ");
  // Send time
  Serial.print(rtc.getTimeStr());
   //MS5803
  // To measure to higher degrees of precision use the following sensor settings:
  // ADC_256
  // ADC_512
  // ADC_1024
  // ADC_2048
  // ADC_4096

  // Read temperature from the sensor in deg C. This operation takes about
  temperature_c = sensor.getTemperature(CELSIUS, ADC_512);

  // Read pressure from the sensor in mbar.
  pressure_abs = sensor.getPressure(ADC_4096);
  
  // Convert abs pressure with the help of altitude into relative pressure
  // This is used in Weather stations.
  pressure_relative = sealevel(pressure_abs, base_altitude);

  // Taking our baseline pressure at the beginning we can find an approximate
  // change in altitude based on the differences in pressure.
  altitude_delta = altitude(pressure_abs , pressure_baseline);

  // Report values via UART
  Serial.print("\t\t");
  Serial.println(temperature_c);
  Serial.print(" °C");
  Serial.print("\t\t");
  Serial.println(pressure_relative); //relative to sea level
  Serial.print(" mbar");
  Serial.print("\t\t");
  Serial.println(altitude_delta);
  Serial.print(" m");

    //TDS
    static unsigned long analogSampleTimepoint = millis();
   if(millis()-analogSampleTimepoint > 40U)     //every 40 milliseconds,read the analog value from the ADC
   {
     analogSampleTimepoint = millis();
     analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);    //read the analog value and store into the buffer
     analogBufferIndex++;
     if(analogBufferIndex == SCOUNT) 
         analogBufferIndex = 0;
   }   
   static unsigned long printTimepoint = millis();
   if(millis()-printTimepoint > 800U)
   {
      printTimepoint = millis();
      for(copyIndex=0;copyIndex<SCOUNT;copyIndex++)
        analogBufferTemp[copyIndex]= analogBuffer[copyIndex];
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / 1024.0; // read the analog value more stable by the median filtering algorithm, and convert to voltage value
      float compensationCoefficient=1.0+0.02*(temperature-25.0);    //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
      float compensationVolatge=averageVoltage/compensationCoefficient;  //temperature compensation
      tdsValue=(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
      //Serial.print("voltage:");
      //Serial.print(averageVoltage,2);
      Serial.print("\t\t");
      //Serial.print("V   ");
      Serial.print(tdsValue,0);
      Serial.print(" ppm");     
   }
 
    //TEMT6000
     int value = analogRead(temt6000Pin);
     Serial.print("\t\t");
     Serial.print(value); 
     Serial.print(" lux");
 
  //GPS
 char gps=gpsSerial.read();
 while (gpsSerial.available() > 0)
    Serial.write(gps);
 Serial.println();
  //delay(2000);

  //SD
  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  dataFile = SD.open("data.txt", FILE_WRITE);

  // if the file is available, write to it:
  if (dataFile) {
    dataFile.print(rtc.getDOWStr());
    dataFile.print(" ");
    dataFile.print(rtc.getDateStr());
    dataFile.print(" -- ");
    dataFile.print(rtc.getTimeStr());
    dataFile.print("\t\t\t");
    dataFile.print(temperature_c);
    dataFile.print(" °C");
    dataFile.print("\t\t");
    dataFile.print(pressure_relative);
    dataFile.print(" mbar");
    dataFile.print("\t\t");
    dataFile.print(altitude_delta);
    dataFile.print(" m");
    dataFile.print("\t\t");
    dataFile.print(tdsValue,0);
    dataFile.print(" ppm");
    dataFile.print("\t\t");
    dataFile.print(value); 
    dataFile.print(" lux");  
    dataFile.print(gps);  
    dataFile.println();
    dataFile.close();
  }
  // if the file isn't open, pop up an error:
  else {
    Serial.println("error opening datalog.txt");
  }
  delay(3000);
  
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReadData(){

       LONG_PRESS_TIME >=1000;
       if(BTserial.available())
       {   
        val=BTserial.readString(); //read and store in val 
       }

          
          if((millis() - lastConnectionTime > postingInterval)) 
          {
          
            dataFile = SD.open("data.txt", FILE_READ);
            if(dataFile)
            {             
             while(dataFile.available()){
              BTserial.write(dataFile.read());                     
             } 
             dataFile.close();
             

                     
          }else{
            BTserial.println("ERROR!");
          }
          
                
          
         }
           
         }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//TDS
int getMedianNum(int bArray[], int iFilterLen) 
{
      int bTab[iFilterLen];
      for (byte i = 0; i<iFilterLen; i++)
      bTab[i] = bArray[i];
      int i, j, bTemp;
      for (j = 0; j < iFilterLen - 1; j++) 
      {
      for (i = 0; i < iFilterLen - j - 1; i++) 
          {
        if (bTab[i] > bTab[i + 1]) 
            {
        bTemp = bTab[i];
            bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
         }
      }
      }
      if ((iFilterLen & 1) > 0)
    bTemp = bTab[(iFilterLen - 1) / 2];
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
      return bTemp;
}
//MS5803
double sealevel(double P, double A)
// Given a pressure P (mbar) taken at a specific altitude (meters),
// return the equivalent pressure (mbar) at sea level.
// This produces pressure readings that can be used for weather measurements.
{
  return (P / pow(1 - (A / 44330.0), 5.255));
}
double altitude(double P, double P0)
// Given a pressure measurement P (mbar) and the pressure at a baseline P0 (mbar),
// return altitude (meters) above baseline.
{
  return (44330.0 * (1 - pow(P / P0, 1 / 5.255)));
}
